Tout d'abord, il est important de préciser certaines hypothèses faites en relation au parser. Afin de se concentrer sur l'analyse de la complexité et des commentaires, le parser a été fait en traitant les classes dans les classes comme des lignes de code normales et en interprétant les lignes contentant seulement "*" comme des lignes vides. Ces choix ne devraient pas influencer le résultat puisqu'ils sont appliqués de façon uniforme. Autant pour les classes que pour les méthodes, nous avons décidé de prioriser les suggestions d'amélioration sur le code appartenant au main du projet plutôt que sur les tests, puisqu'il nous semble raisonnable de penser que les tests requièrent parfois moins de commentaires et que si le code est mieux commenté et expliqué, il sera plus facile à tester par la suite.

Les interfaces et classes abstraites ont été considérées comme des classes. Les classes sans aucune méthode implémentées ont un "WMC" de 0.

Classes:
La métrique de "class_BC" a été l'outil principal utilisé pour notre analyse, mais nous avons également regardé les autres métriques, notamment "WMC" et "class_DC" pour bien comprendre le résultat de "classe_BC".

1. La classe "XYPlot"
Cette classe contient un bon nombres de lignes de commentaires (1847 CLOC vs 4571 LOC), mais son grand nombre de méthodes complexes ("WMC" de 436) fait en sorte que son "classe_BC" est le plus bas du projet. Bien que le pourcentage de lignes commentées ne soit pas si mal, nous recommendons d'ajouter encore plus de commentaire dû à la nature complexe de la classe et songer à simplifier les méthodes de la classe, soit en les retravaillant ou en séparant la classe si sa nature le permet.
Note : beaucoup de classes souffrent des mêmes problèmes et pourraient être améliorées de la même façon, notamment "CategoryPlot", "ChartPanel", "AbstractRenderer" et "PiePlot". Celles-ci auraient pu être suggérées en 2. et en 3., mais l'analyse aurait été très semblable. Nous avons donc choisi d'identifier des besoins différents pour donner plus de suggestions en général. L'amélioration des classes énumérées ci-haut est tout de même fortement suggérée.

2. La classe "BorderArrangement"
À l'exception de quelques classes de test, cette classe a le "classe_DC" le plus bas du projet (0.229813665) en plus d'avoir un "classe_BC" aussi très bas (0.00851161720726938). Le WMC de cette classe n'est pas si élevé (27) et il est donc préférable d'améliorer celle-ci en ajoutant des commentaires. En poussant l'analyse plus loin, on remarque dans nos données sur les méthodes que la plus longue méthode de cette classe (arrangeNN_BlockContainer_Graphics2D, 63 LOC) a un methode_DC inférieur à 0.10. Ajouter des commentaires à cette méthode serait donc un bon point de départ pour améliorer cette classe en plus d'y ajouter des commentaires en général.

3. La classe "CrosshairOverlay"
Cette classe a été identifiée puisqu'elle possède une combinaison des deux métriques problématiques décrites plus haut : son "classe_BC" est bas (0.00429790630564253) et son "classe_DC" aussi (0.262172284644194). Bien qu'individuellement, aucune de ces deux métriques ne soit la pire du projet, aucune autre classe n'a une pire combinaison des deux. Il faudrait donc une solution en deux temps pour cette classe : d'abord, on ajoute des commentaires dans le code, puis on réduit la complexité des méthodes dans la mesure du possible.


Méthodes:
Pour analyser les méthodes sur lesquelles nous suggérons des améliorations, nous avons d'abord retiré les méthodes contentant moins de 10 lignes. Puisque ces méthodes sont très courtes, il est plus difficile de justifier la nécessité de commentaires sans connaître la nature de ces méthodes. Ensuite, nous avons analysé les métriques, principalement "method_BC" puisqu'il s'agit d'un ratio incluant toutes les autres données, mais aussi "method_DC" et "CC" pour mieux comprendre le contexte du résultat de "method_BC". Voici donc les 3 méthodes pour lesquelles nous suggérons des améliorations :

1. Les méthodes "equals_Object"
Ces méthodes sont présentes dans de nombreuses classes et ne contiennent presque pas de commentaires. Selon le nom, il est raisonnable de penser qu'il s'agit d'une méthode permettant la comparaison entre l'objet lui-même et un autre objet pour déterminer l'égalité ou non. Bien que, dans certains cas où la comparaison est simple, il pourrait être justifié de ne pas commenter ce genre de méthode, le projet inclut des méthodes "equals_Object" dont le "CC" est égal ou supérieur à 50 et le "method_BC" est inférieur à 0.0009 tel que dans les classes "XYPlot", "CategoryPlot" et "PiePlot". Ces méthodes semblent très complexes et serait relativement difficiles à modifier ou réutiliser sans aucun commentaire. Certaines explications, particulièrement dans les classes où cette méthode est plus complexe, permettrait aux gens qui explorent le code de mieux le comprendre. La suggestions est donc d'ajouter des lignes de commentaires dans les cas où le "CC" est relativement élevé.

2. La méthode "executeQuery_Connection_String" de la classe "JDBCXYDataset"
Cette méthode est l'une des plus longues du projet (177 lignes de code) et ne contient que 21 lignes de commentaires pour un "CC" très élevé de 48 et un "method_BC" extrêmement bas de 0.00247175141242937. Bien évidemment, augmenter le nombre de lignes de commentaires aiderait beaucoup à améliorer la clarté et les métriques de cette méthode, mais il serait aussi pertinent de se questionner quand à la longueur et la complexité de celle-ci. Il pourrait être pertinent de diviser cette longue méthode en plusieurs petites méthodes pour mieux diviser le rôle de chacune et commenter ces dernières individuellement. Cela constituerait une amélioration en termes de commentaires, mais aussi permettre d'éviter que la méthode fasse trop de choses différentes (respect du Single Responsabilty Principle).

3. La méthode "hashCode" de la classe "CategoryPlot"
Cette méthode a été identifiée puisqu'il s'agit de la plus longue méthode qui ne contient aucun commentaire. Il serait intéressant d'inclure des commentaires sur le fonctionnement de cette méthode mais, si les détails de la méthode ne veulent pas être divulgués pour certaines raisons particulières, il serait tout de même important d'au moins inclure des commentaires sur son utilisation (particulièrement puisqu'il s'agit d'une méthode publique).
D'autres méthodes souffrant du même problème :  "hashCode" de "XYPlot", "createPlotTabs_Plot" de "DefaultPlotEditor", "createTickUnitPanel" de "DefaultNumberAxisEditor", etc.
